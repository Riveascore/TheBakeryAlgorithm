#Mon Mar 25 22:46:26 CDT 2013
cmdhistory=["bob" "(makeStuff 5 6)" "bob" "mob" "(range 0 15)" "(for [x (range 0 10)] x)" "(for [x (range 0 10)] [\:id x \:type \\"server\\"])" "(make-people 10 15)" "customers" "servers" "(make-people 10 15)" "servers" "customers" "(make-people 10 15)" "servers" "freeServers" "(peek freeServers)" "servers" "freeServers" "(peek freeServers)" "freeServers" "(peek freeServers)" "(peek poop)" "(pop poop)" "poop" "(peek poop)" "(peek (pop poop))" "(peek (pop (pop poop)))" "stuff" "(peek stuff)" "(count servers)" "(nth servers 0)" "freeServers" "(peek freeServers)" "(peek (pop freeServers))" "(peek freeServers)" "(fn [rotateAmount collectionToRotate]\\r\\n  (if (< 0 rotateAmount)\\r\\n    (loop [x rotateAmount y collectionToRotate]\\r\\n      (if (not\= 0 x)\\r\\n        (recur\\r\\n          (dec x)\\r\\n          (conj (rest y) (first y))\\r\\n        )\\r\\n      )\\r\\n    )\\r\\n    (loop [x rotateAmount y collectionToRotate]\\r\\n      (if (not\= 0 x)\\r\\n        (recur\\r\\n          (dec x)\\r\\n          (cons (last y) (butlast y))\\r\\n        ) \\r\\n      )\\r\\n    )\\r\\n  )\\r\\n)" "(\\r\\n  (fn [rotateAmount collectionToRotate]\\r\\n  (if (< 0 rotateAmount)\\r\\n    (loop [x rotateAmount y collectionToRotate]\\r\\n      (if (not\= 0 x)\\r\\n        (recur\\r\\n          (dec x)\\r\\n          (conj (rest y) (first y))\\r\\n        )\\r\\n      )\\r\\n    )\\r\\n    (loop [x rotateAmount y collectionToRotate]\\r\\n      (if (not\= 0 x)\\r\\n        (recur\\r\\n          (dec x)\\r\\n          (cons (last y) (butlast y))\\r\\n        ) \\r\\n      )\\r\\n    )\\r\\n  )\\r\\n)\\r\\n  2 \\r\\n  [1 2 3 4 5])" "now-serving" "serve-next" "now-serving" "(now-serving)" "now-serving" "counter" "next-value" "counter" "@counter" "(swap\! counter inc)" "counter" "@counter" "next-value" "@counter" "(swap\! counter inc)" "@counter" "next-value" "counter" "@counter" "(next-value counter)" "counter" "(next-value 5)" "@counter" "(next-value)" "counter" "@counter" "(next-value)" "(next)" "(serve-next)" "s" "customers" "(serve-next)" "@now-serving" "(serve-next)" "freeServers" "servers" "originalFreeServers" "(pop originalFreeServers)" "(pop (pop originalFreeServers))" "freeServers" "servers" "freeServers" "(pop freeServers)" "originalFreeServers" "(pop originalFreeServers)" "@originalFreeServers" "(pop (pop (pop originalFreeServers)))" "@(pop (pop (pop originalFreeServers)))" "(conj x 5)" "(swap\! x pop)" "x" "@x" "(swap\! x pop)" "(swap\! x conj)" "(swap\! x \#(conj % 1))" "@x" "(swap\! x pop)" "(swap\! x \#(conj % 1))" "(swap\! x peek)" "(peek x)" "(pop x)" "swap\!" "shutdown-agents" "(dequeue\! freeServers)" "servers" "(dequeue\! freeServers)" "customer-list" "ticket-number" "(first customers-as-list)" "customer-list" "(\:id (first customers-as-list))" "(defn sleep-inc []\\n  @(future (Thread/sleep 5000) inc)\\n)" "(sleep-inc)" "(defn sleep-inc []\\n  @(future (Thread/sleep 5000) inc)\\n)" "(sleep-inc)" "(println \\"hi\\" 5 \\"low\\")" "(clojure.string/split \\"12_5\\" \#\\"_\\")" "(name \:keyword)" "(java.lang.Integer/parseInt \\"15\\")" "(Integer/parseInt \\"15\\")" "(str 5 \\"_\\" 6)" "customer-list" "(dequeue\! freeServers)" "(freeServers peek)" "@(freeServers peek)" "(swap\! freeServers peek)" "(peek @freeServers)" "(compare-and-set\! freeServers @freeServers (peek @freeServers))" "(peek @freeServers)" "(defn fib\\n  ([n]\\n     (fib [0 1] n))\\n  ([x, n]\\n     (if (< (count x) n) \\n       (fib (conj x (+ (last x) (nth x (- (count x) 2)))) n)\\n       x)))" "(fib 20)" "(peek @freeServers)" "@(peek @freeServers)" "(peek freeServers)" "(peek @freeServers)" "(dequeue\! freeServers)" "(symbol \\"hi\\" 5)" "(symbol \\"hi\\" \\"bye\\")" "(symbol (str \\"customer\\" 5))" "(def (symbol \\"hi\\") 5)" "(intern 'user 'server5 \\"foo\\")" "server5" "(intern 'user 'server5' (agent {\:me \\"chris\\" \:age 500}))" "server5" "(intern 'user 'server5' (agent {\:me \\"chris\\" \:age 500}))" "server5" "(intern 'user 'server5' (agent {\:me \\"chris\\" \:age 500}))" "server5'" "(send\! server5 \\"wut\\")" "(def (keyword \\"hi\\") 50)" "(def (gensym \\"hi\\") 5)" "(gensym)" "(gensym \\"hi\\")" "(gensym)" "(gensym \\"hi\\")" "(def \#^{\:wut true} 5)" "(def ^{\\"hi\\"} 5)" "(hi)" "hi" "(def (meta \#\\"hi\\") 5)" "(def (meta \#'hi') 5)" "(def \#^{\:macro true} 5)" "(def ^String \\"hi\\" 5)" "(def ^String (str \\"cust\\" 5) 20)" "cust5" "(def \:name \\"cust5\\" 23)" "(def (symbol \\"hiiiii\\") 20)" "(def ~(symbol \\"custcust\\") 50)" "(defn bob 5)" "(defn [] bob 5)" "(defn bob [] 5)" "bob" "(defn ~(symbol \\"bob\\") [] 5)" "'(defn ~(symbol \\"bob\\") [] 5)" "bob" "(bob)" "'(def ~(symbol \\"bob\\") 5)" "bob" "(bob)" "'(def ~(symbol (str \\"server\\" 5)) {\:id 5 \:type \\"server\\"})" "(\\"server5\\")" "(server5)" "server5" "(server5)" "server5" "(bob)" "bob" "(bob)" "(\\"bob\\")" "(bob)" "bob" "(bob)" "`(defn ~(symbol (str \\"_\\" 5)) [] 20)" "_5" "(_5)" "(symbol \\"_5\\")" "'~`(defn ~(symbol \\"bob\\") [] 200)" "(bob)" "bob" "(clojure.core/defn _5 [] 20)" "_5" "(_5)" "(clojure.core/defn ~(symbol \\"_6\\") [] 20)" "`(clojure.core/defn ~(symbol \\"_6\\") [] 20)" "_6" "(_6)" "(\\"_6\\")" "(makeServer \\"hihi\\")" "asd" "(asd)" "(ok)" "ok" "(def (str \\"hi\\") 50)" "server5" "(server5)" "(server5 3)" "server5" "(server5)" "(server5 0)" "(server5)" "(peek @freeServers)" "server200" "(server200)" "(symbol (str \\"server\\" 200))" "((symbol (str \\"server\\" 200)))" "server200" "(server200)" "(def serverNumber 5)\\n(def' (str \\"server\\" serverNumber) {\:id serverNumber \:value 4939})" "(defmacro def' [sym-exp & other-args]\\n  `(def ~(-> sym-exp eval symbol) ~@other-args))\\n\\n(def serverNumber 5)\\n(def' (str \\"server\\" serverNumber) {\:id serverNumber \:value 4939})" "server5" "server12" "server30" "(server30)" "@server30" "server30" "@server30" "(deref server30)" "@server30" "server30" "(server30)" "@(server30)" "(peek @freeServers)" "@(peek @freeServers)" "@((peek @freeServers))" "((peek @freeServers))" "(peek @freeServers)" "((peek @freeServers))" "@(peek @freeServers)" "(dequeue\! freeServers)" "@(dequeue\! freeServers)" "server30" "server31" "@server31" "(server31)" "5" "@5" "@30" "(def hi (agent 0))" "hi" "(def hi (agent 40))" "hi" "(dequeue\! freeServers)" "agent" "ourServer" "(next-number)" "next-number" "@next-number" "next-number" "(swap\! ticket-machine)" "(swap\! ticket-machine inc)" "next-number" "(next-number)" "next-number" "@next-number" "ourList" "(map \#(createPerson % \\"customer\\") (range 10))" "(map \#(createPerson % \\"server\\") (range 10))" "(first customer-list)" "(map \#(println %) customer-list)" "(\:id (first customer-list))" "(first customer-list)" "@(first customer-list)" "(\:id @(first customer-list))" "(def mahAgent (agent 100))" "(send mahAgent + 9000)" "mahAgent" "@mahAgent" "@freeServers" "(peek @freeServers)" "(dequeue\! freeServers)" "(dequeue\! @freeServers)" "(dequeue\! freeServers)" "(first customer-list)" "(nth customer-list 4)" "(nth customer-list 1)" "(first customer-list)" "(nth customer-list 0)" "(nth customer-list 1)" "(now-serving)" "@now-serving" "(serve-next)"]
eclipse.preferences.version=1
