#Sun Mar 24 17:25:55 CDT 2013
cmdhistory=["bob" "(makeStuff 5 6)" "bob" "mob" "(range 0 15)" "(for [x (range 0 10)] x)" "(for [x (range 0 10)] [\:id x \:type \\"server\\"])" "(make-people 10 15)" "customers" "servers" "(make-people 10 15)" "servers" "customers" "(make-people 10 15)" "servers" "freeServers" "(peek freeServers)" "servers" "freeServers" "(peek freeServers)" "freeServers" "(peek freeServers)" "(peek poop)" "(pop poop)" "poop" "(peek poop)" "(peek (pop poop))" "(peek (pop (pop poop)))" "stuff" "(peek stuff)" "(count servers)" "(nth servers 0)" "freeServers" "(peek freeServers)" "(peek (pop freeServers))" "(peek freeServers)" "(fn [rotateAmount collectionToRotate]\\r\\n  (if (< 0 rotateAmount)\\r\\n    (loop [x rotateAmount y collectionToRotate]\\r\\n      (if (not\= 0 x)\\r\\n        (recur\\r\\n          (dec x)\\r\\n          (conj (rest y) (first y))\\r\\n        )\\r\\n      )\\r\\n    )\\r\\n    (loop [x rotateAmount y collectionToRotate]\\r\\n      (if (not\= 0 x)\\r\\n        (recur\\r\\n          (dec x)\\r\\n          (cons (last y) (butlast y))\\r\\n        ) \\r\\n      )\\r\\n    )\\r\\n  )\\r\\n)" "(\\r\\n  (fn [rotateAmount collectionToRotate]\\r\\n  (if (< 0 rotateAmount)\\r\\n    (loop [x rotateAmount y collectionToRotate]\\r\\n      (if (not\= 0 x)\\r\\n        (recur\\r\\n          (dec x)\\r\\n          (conj (rest y) (first y))\\r\\n        )\\r\\n      )\\r\\n    )\\r\\n    (loop [x rotateAmount y collectionToRotate]\\r\\n      (if (not\= 0 x)\\r\\n        (recur\\r\\n          (dec x)\\r\\n          (cons (last y) (butlast y))\\r\\n        ) \\r\\n      )\\r\\n    )\\r\\n  )\\r\\n)\\r\\n  2 \\r\\n  [1 2 3 4 5])" "now-serving" "serve-next" "now-serving" "(now-serving)" "now-serving" "counter" "next-value" "counter" "@counter" "(swap\! counter inc)" "counter" "@counter" "next-value" "@counter" "(swap\! counter inc)" "@counter" "next-value" "counter" "@counter" "(next-value counter)" "counter" "(next-value 5)" "@counter" "(next-value)" "counter" "@counter" "(next-value)" "(next)" "(serve-next)" "s" "customers" "(serve-next)" "@now-serving" "(serve-next)" "freeServers" "servers" "originalFreeServers" "(pop originalFreeServers)" "(pop (pop originalFreeServers))" "freeServers" "servers" "freeServers" "(pop freeServers)" "originalFreeServers" "(pop originalFreeServers)" "@originalFreeServers" "(pop (pop (pop originalFreeServers)))" "@(pop (pop (pop originalFreeServers)))" "(conj x 5)" "(swap\! x pop)" "x" "@x" "(swap\! x pop)" "(swap\! x conj)" "(swap\! x \#(conj % 1))" "@x" "(swap\! x pop)" "(swap\! x \#(conj % 1))" "(swap\! x peek)" "(peek x)" "(pop x)" "swap\!" "shutdown-agents" "(dequeue\! freeServers)" "servers" "(dequeue\! freeServers)" "customer-list" "ticket-number" "(first customers-as-list)" "customer-list" "(\:id (first customers-as-list))" "(defn sleep-inc []\\n  @(future (Thread/sleep 5000) inc)\\n)" "(sleep-inc)" "(defn sleep-inc []\\n  @(future (Thread/sleep 5000) inc)\\n)" "(sleep-inc)" "(println \\"hi\\" 5 \\"low\\")" "(clojure.string/split \\"12_5\\" \#\\"_\\")" "(name \:keyword)" "(java.lang.Integer/parseInt \\"15\\")" "(Integer/parseInt \\"15\\")" "(str 5 \\"_\\" 6)" "customer-list" "(dequeue\! freeServers)" "(freeServers peek)" "@(freeServers peek)" "(swap\! freeServers peek)" "(peek @freeServers)" "(compare-and-set\! freeServers @freeServers (peek @freeServers))" "(peek @freeServers)" "(defn fib\\n  ([n]\\n     (fib [0 1] n))\\n  ([x, n]\\n     (if (< (count x) n) \\n       (fib (conj x (+ (last x) (nth x (- (count x) 2)))) n)\\n       x)))" "(fib 20)"]
eclipse.preferences.version=1
